{"version":3,"sources":["fBase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","authService","fbInstance","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","ok","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","require","autoFocus","src","alt","zIndex","faTrash","faPencilAlt","NweetFactory","userObj","attachment","setAttachment","nweet","setNweet","e","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createAt","firestore","Timestamp","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","files","theFile","reader","FileReader","addEventListener","result","currentTarget","undefined","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","Snapshot","nweetArray","docs","map","marginTop","key","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da624603.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  /* 아래처럼 환경변수 process.env를 사용하여 키를 캡슐화할때에는 규칙이 있다.\n리액트 환경 내부에서 사용시에는 반드시 REACT_APP_~  이런식으로 어두를 붙여야 한다. 그렇지 않으면 작동하지\n않는다. 이것은 리액트가 프레임워크라서 그런것..\n또한, 반드시 .env파일은 프로젝트 폴더 내의 최상위에 루트에 있어야 한다. */\n\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\n// export default firebaseConfig;\nfirebase.initializeApp(firebaseConfig);\nexport const authService = firebase.auth(); //이렇게 익스포트 하는 이유는 필요한 서비스 만을 꺼내기 위함이다.\nexport const fbInstance = firebase;\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import { authService } from \"fBase\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else {\n      setPassword(value);\n    }\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        //we have to create account\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  //맨처음 setNewAccount훅을 만들시 기본값을 false를 주었기에 가능한 일.\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Log In\"}\n          className=\"authInput authSubmit\"\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n      <div>{error}</div>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import {\n  faGithub,\n  faGoogle,\n  faTwitter,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport AuthForm from \"components/AuthForm\";\nimport { authService, fbInstance } from \"fBase\";\nimport React from \"react\";\n\nconst Auth = () => {\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new fbInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new fbInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n    console.log(data);\n  };\n\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;\n","import { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { dbService, storageService } from \"fBase\";\nimport React, { useState } from \"react\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false); // 에디팅 모드인지 아닌지를 알려주는 기준값\n  const [newNweet, setNewNweet] = useState(nweetObj.text); //인풋의 텍스트 업데이트용\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you wanna delete this nweet??\");\n    console.log(ok);\n    if (ok) {\n      //delete nweet function\n      console.log(nweetObj);\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\n      if (nweetObj.attachmentUrl) {\n        await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n      }\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev); //말그대로 토글 기능\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`nweets/${nweetObj.id}`).update({ text: newNweet });\n    //업데이트의 요구사항인 객체에는, 내 도큐먼트 상의 바꿀 필드 명이 들어가야 한다. 이 경우는 새로 업데이트 하는\n    //트윗이 텍스트 필드이므로 반드시 그것을 지정해야 한다.\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewNweet(value);\n  };\n\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\n            <input\n              type=\"text\"\n              placeholder=\"Edit your nweet\"\n              onChange={onChange}\n              value={newNweet}\n              require\n              autoFocus\n              className=\"formInput\"\n            />\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\n          </form>\n          <button onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n          </button>\n        </>\n      ) : (\n        <>\n          <h4>{nweetObj.text}</h4>\n          {nweetObj.attachmentUrl && (\n            <img src={nweetObj.attachmentUrl} alt=\"\" style={{ zIndex: 9 }} />\n          )}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;\n","import { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { dbService, fbInstance, storageService } from \"fBase\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\"; //유니크한 아이디를 생성할때 매우 도움이 되는 모듈\n\nconst NweetFactory = ({ userObj }) => {\n  const [attachment, setAttachment] = useState(\"\");\n  const [nweet, setNweet] = useState(\"\");\n\n  const onSubmit = async (e) => {\n    if (nweet === \"\") {\n      return;\n    }\n    e.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      //child를 생성해서 그 안에 패스를 설정한 다음(패스는 스토리지에 들어갈 자리이다.) 그 다음 레퍼런스를 얻어낸다.\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      //위의 과정을 통해 레퍼런스는 attachment의 데이터를 옵션으로(이 경우는 url) 지정한 스트링 폼의 형태로 스토리지에 저장되게 된다. 그 다음 그 결과를 객체로서 반환한다.\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n\n    const nweetObj = {\n      text: nweet,\n      createAt: fbInstance.firestore.Timestamp.now(), //Date.now()??\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    //await를 쓰는 이유는 getDownloadURL()가 반환하는 객체가 프로미스라서 이다. 비동기 통신이 끝나면, url를 반환해 준다.\n\n    await dbService.collection(\"nweets\").add(nweetObj);\n    setNweet(\"\");\n    setAttachment(\"\");\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNweet(value);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    console.log(event.target.value);\n    const theFile = files[0];\n    // console.log(theFile);\n    const reader = new FileReader();\n    reader.addEventListener(\"loadend\", (event) => {\n      const {\n        currentTarget: { result },\n      } = event;\n      console.log(event.currentTarget);\n      setAttachment(result);\n    });\n    if (theFile !== undefined) {\n      reader.readAsDataURL(theFile);\n    }\n    /* 이렇게 함으로서 결과값의 객체에 result가 포함되는데, 이게 어마어마하게 긴 url로 나온다. 근데 그 url을 브라우져에 붙여넣기 하면 실제로 사진을 볼수 있어!!!! 심지어는 인터넷 연결과는 상관이 없는 실행가능한 url 인거야!! 퍼킹 어썸~~~ 이걸 어떻게 활용할까? 문자열로서 데이터베이스에 저장하면 되려나? */\n  };\n  const onClearAttachment = () => {\n    setAttachment(\"\");\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"what's on your mind?\"\n          maxLength={120}\n          value={nweet}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{ opacity: 0 }}\n      />\n      {\n        //attachment에 스테이트의 값이 존재할때만 오른쪽의 태그를 보이겠다는 코드. 이런게 중요하다.\n        attachment && (\n          <div className=\"factoryFrom__attachment\">\n            <img\n              src={attachment}\n              style={{\n                backgroundImage: attachment,\n              }}\n              alt=\"\"\n            />\n            <div className=\"factoryFrom__clear\" onClick={onClearAttachment}>\n              <span>Remove</span>\n              <FontAwesomeIcon icon={faTimes} />\n            </div>\n          </div>\n        )\n      }\n    </form>\n  );\n};\n\nexport default NweetFactory;\n","import { dbService } from \"fBase\";\nimport React, { useEffect, useState } from \"react\";\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\n\nconst Home = ({ userObj }) => {\n  const [nweets, setNweets] = useState([]);\n\n  /*  const getNweets = async () => {\n    const dbNweets = await dbService.collection(\"nweets\").get();\n    dbNweets.forEach((docu) => {\n      const nweetObject = {\n        ...docu.data(),\n        id: docu.id,\n      };\n      setNweets((prev) => [nweetObject, ...prev]);\n      /*  setNweets((prev) => [docu.data(), ...prev]);\n      //위의 코드가 내 앱을 만드는데 상당히 도움이 될것 같다.\n      //일단 저위의 뜻은, 현재 setNweet가 가리키는 nweets의 값을 참조인수로 하여, docu.data()를 통해 풀려난 값을 배열의 제일 처음으로 넣고, 그 다음 이전 nweets의 값(prev)을 그 뒤에 전부 풀라는 명시이다.\n      //이 코드를 숙지하자..스테이트를 사용시 매우 유용할것 \n    });\n  }; */\n  useEffect(() => {\n    // getNweets();\n    //onSnapshot은 기본적으로 디비에 무언가 일이 있을때 알림을 준다. 즉, 리스너이다.\n    //별도로 추가한 아이디는 컬렉션의 아이디이다.\n    //useEffect는 스테이트가 변했을때, 즉 렌더링이 되었을때 작동하므로, 트윗에 변화가 있다면, 밑의 onSnapshot이 그 변화를 감지할것이다.\n    dbService.collection(\"nweets\").onSnapshot((Snapshot) => {\n      const nweetArray = Snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n\n      setNweets(nweetArray);\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <NweetFactory userObj={userObj} />\n      <div\n        style={{\n          marginTop: 30,\n        }}\n      >\n        {nweets.map((nweet) => {\n          return (\n            <Nweet\n              key={nweet.id}\n              nweetObj={nweet}\n              isOwner={nweet.creatorId === userObj.uid}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nconst Navigation = ({ userObj }) => (\n  <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n      <li>\n        <Link to=\"/\" style={{ marginRight: 10 }}>\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n        </Link>\n      </li>\n      <li>\n        <Link\n          to=\"/profile\"\n          style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: 12,\n          }}\n        >\n          <FontAwesomeIcon icon={faUser} color=\"#04AAFF\" size=\"2x\" />\n          <span style={{ marginTop: 10 }}>\n            {userObj.displayName\n              ? `${userObj.displayName}の Profile`\n              : \"Profile\"}\n          </span>\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import { authService, dbService } from \"fBase\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Profile = ({ userObj, refreshUser }) => {\n  let history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n\n  const getMyNweets = async () => {\n    const nweets = await dbService\n      .collection(\"nweets\") //콜렉션의 이름\n      .where(\"creatorId\", \"==\", userObj.uid)\n      .orderBy(\"createAt\") //정렬에는 DB의 색인이 필요하다, 즉 인덱스가 필요한데...파이어베이스는 NOSQL이다보니 직접 색인등록을 해 주어야 한다.\n      .get();\n    console.log(nweets.docs.map((doc) => doc.data()));\n  };\n  /* 위의 메소드는 내 정보를 어떻게 필터링하는가에 대한 함수이다. firestore에 관한 인스턴스인 dbService는 내가 올린 데이터의 콜렉션을 제공한다.\n콜렉션 안에는 콜렉션이름을 지정하여야 한다. 그 이름은 내가 파이어베이스에 설정한 콜렉션네임이다. 이게 콜렉션패스 된다. 그 다음, where메소드를 사용하는데,\n쉽게 생각해서 콜렉션 안의 필드를 참조한다고 생각하자. 콜렉션 안의 creatorId 가 == 즉, 같은가...무엇과? 지금 이 컴포넌트가 프롭스로 받고 있는 userObj의 uid, \n즉 지금 로그인 해 있는 유저와 같은가, 에 대해 쿼리하고, 그 다음 get()으로 문서를 다운로드 하여 nweets에 데이터가 들어간다. 그 데이터는 도큐먼트속성이 있기 때문에 \ndocs프로퍼티 안에서 map을 통해 각각의 객체에 data()함수를 적용하여 실제로 사용할수 있는 객체로 반환된다.(map은forEach와 달라서 리턴 값이 있다.)\n*/\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n        //photoUrl을 업로드 하는 건 숙제로\n      });\n      refreshUser();\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          type=\"text\"\n          placeholder=\"Display Name\"\n          autoFocus\n          onChange={onChange}\n          value={newDisplayName}\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{ marginTop: 10 }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Navigation from \"components/Navigation\";\nimport Profile from \"routes/Profile\";\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <div\n            style={{\n              maxWidth: 890,\n              width: \"100%\",\n              margin: \"0 auto\",\n              marginTop: 80,\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile userObj={userObj} refreshUser={refreshUser} />\n            </Route>\n          </div>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n            <Redirect from=\"*\" to=\"/\" />\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"fBase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);\n  // 위 코드의 isLoggedIn의 값은 바뀌질 않는다. 로그인해도. 따라서 아래와 같이 강제적으로 로그인 상태\n  //를 바꿔주어야 한다.\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  //위의 userObj는 모든 컴포넌트에서 활용될 가능성이 있기 때문에 항상 탑레벨에서 정의되어야 한다. 그래야 프롭스로 전달..\n  //이것은 굉장히 중요한 이유인데, 탑레벨의 객체인 userObj가 하위레벨에서 변경되거나 갱신되면 모든 소속된 컴포넌트가 리렌더링이 된다. 이것이 하나의 소스를 통일하여\n  //사용해야 하는 이유이다. 가령 프로필을 변경후 리렌더링을 시켜야 한다고 가정했을때, userObj의 내용을 갱신하는 것이 매우 중요한 키 포인트가 된다.\n\n  useEffect(() => {\n    //\n    authService.onAuthStateChanged((user) => {\n      //로그인이 되거나 유저에 관련된 상태가 바뀌면 authStateChanged가 호출이 될것이다.\n      //onAUthStateChanged 는 로그인 혹은 로그아웃이 콜백을 만들거다. 그 콜백의 결과가 user객체\n      if (user) {\n        // setIsLoggedIn(true);\n        /*  setUserObj(user); // user객체는 엄청나게 크다. 따라서 아래의 리프레시유저 함수가 userObj를 임의로 리프레시 해도, 다 읽히지 않을수가 있다. ㄸ라서 필요한 부분만 가져오는게 더 좋다. */\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    //이 메소드의 목적은 하위레벨에서 userObj와 관련된 리렌더링의 트리거가 되게 하기 위함이다. 프롭스로 전달될 예정.\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    }); //여기서 문제가 발생되는데, 리액트가 너무 큰 오브젝트를 다루면 내부적으로 에러가 발생할수가 있다.\n    //따라서,\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        \"Initializing....\"\n      )}\n    </>\n  );\n}\n//useEffect를 사용함으로서 모든 컴포넌트가 로딩이 완료 된 다음에 중요한 처리를 하는 방식.\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}